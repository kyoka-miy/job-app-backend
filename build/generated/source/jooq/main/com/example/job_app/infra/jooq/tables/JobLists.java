/*
 * This file is generated by jOOQ.
 */
package com.example.job_app.infra.jooq.tables;


import com.example.job_app.infra.jooq.JobApp;
import com.example.job_app.infra.jooq.Keys;
import com.example.job_app.infra.jooq.tables.records.JobListsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobLists extends TableImpl<JobListsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>job_app.job_lists</code>
     */
    public static final JobLists JOB_LISTS = new JobLists();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobListsRecord> getRecordType() {
        return JobListsRecord.class;
    }

    /**
     * The column <code>job_app.job_lists.job_list_id</code>.
     */
    public final TableField<JobListsRecord, String> JOB_LIST_ID = createField(DSL.name("job_list_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>job_app.job_lists.active</code>.
     */
    public final TableField<JobListsRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private JobLists(Name alias, Table<JobListsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobLists(Name alias, Table<JobListsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>job_app.job_lists</code> table reference
     */
    public JobLists(String alias) {
        this(DSL.name(alias), JOB_LISTS);
    }

    /**
     * Create an aliased <code>job_app.job_lists</code> table reference
     */
    public JobLists(Name alias) {
        this(alias, JOB_LISTS);
    }

    /**
     * Create a <code>job_app.job_lists</code> table reference
     */
    public JobLists() {
        this(DSL.name("job_lists"), null);
    }

    public <O extends Record> JobLists(Table<O> child, ForeignKey<O, JobListsRecord> key) {
        super(child, key, JOB_LISTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JobApp.JOB_APP;
    }

    @Override
    public UniqueKey<JobListsRecord> getPrimaryKey() {
        return Keys.KEY_JOB_LISTS_PRIMARY;
    }

    @Override
    public JobLists as(String alias) {
        return new JobLists(DSL.name(alias), this);
    }

    @Override
    public JobLists as(Name alias) {
        return new JobLists(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobLists rename(String name) {
        return new JobLists(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobLists rename(Name name) {
        return new JobLists(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
