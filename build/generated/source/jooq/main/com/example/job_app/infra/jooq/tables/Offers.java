/*
 * This file is generated by jOOQ.
 */
package com.example.job_app.infra.jooq.tables;


import com.example.job_app.infra.jooq.Cqq2l0ixquavsq6l;
import com.example.job_app.infra.jooq.Keys;
import com.example.job_app.infra.jooq.tables.records.OffersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offers extends TableImpl<OffersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cqq2l0ixquavsq6l.offers</code>
     */
    public static final Offers OFFERS = new Offers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OffersRecord> getRecordType() {
        return OffersRecord.class;
    }

    /**
     * The column <code>cqq2l0ixquavsq6l.offers.offer_id</code>.
     */
    public final TableField<OffersRecord, String> OFFER_ID = createField(DSL.name("offer_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>cqq2l0ixquavsq6l.offers.received_datetime</code>.
     */
    public final TableField<OffersRecord, LocalDateTime> RECEIVED_DATETIME = createField(DSL.name("received_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>cqq2l0ixquavsq6l.offers.deadline_datetime</code>.
     */
    public final TableField<OffersRecord, LocalDateTime> DEADLINE_DATETIME = createField(DSL.name("deadline_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>cqq2l0ixquavsq6l.offers.accepted_datetime</code>.
     */
    public final TableField<OffersRecord, LocalDateTime> ACCEPTED_DATETIME = createField(DSL.name("accepted_datetime"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>cqq2l0ixquavsq6l.offers.job_id</code>.
     */
    public final TableField<OffersRecord, String> JOB_ID = createField(DSL.name("job_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>cqq2l0ixquavsq6l.offers.activity_id</code>.
     */
    public final TableField<OffersRecord, String> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>cqq2l0ixquavsq6l.offers.board_id</code>.
     */
    public final TableField<OffersRecord, String> BOARD_ID = createField(DSL.name("board_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Offers(Name alias, Table<OffersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offers(Name alias, Table<OffersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cqq2l0ixquavsq6l.offers</code> table reference
     */
    public Offers(String alias) {
        this(DSL.name(alias), OFFERS);
    }

    /**
     * Create an aliased <code>cqq2l0ixquavsq6l.offers</code> table reference
     */
    public Offers(Name alias) {
        this(alias, OFFERS);
    }

    /**
     * Create a <code>cqq2l0ixquavsq6l.offers</code> table reference
     */
    public Offers() {
        this(DSL.name("offers"), null);
    }

    public <O extends Record> Offers(Table<O> child, ForeignKey<O, OffersRecord> key) {
        super(child, key, OFFERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Cqq2l0ixquavsq6l.CQQ2L0IXQUAVSQ6L;
    }

    @Override
    public UniqueKey<OffersRecord> getPrimaryKey() {
        return Keys.KEY_OFFERS_PRIMARY;
    }

    @Override
    public List<ForeignKey<OffersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_OFFERS_JOBS, Keys.FK_OFFERS_ACTIVITIES, Keys.FK_OFFERS_BOARDS);
    }

    private transient Jobs _jobs;
    private transient Activities _activities;
    private transient Boards _boards;

    /**
     * Get the implicit join path to the <code>cqq2l0ixquavsq6l.jobs</code>
     * table.
     */
    public Jobs jobs() {
        if (_jobs == null)
            _jobs = new Jobs(this, Keys.FK_OFFERS_JOBS);

        return _jobs;
    }

    /**
     * Get the implicit join path to the
     * <code>cqq2l0ixquavsq6l.activities</code> table.
     */
    public Activities activities() {
        if (_activities == null)
            _activities = new Activities(this, Keys.FK_OFFERS_ACTIVITIES);

        return _activities;
    }

    /**
     * Get the implicit join path to the <code>cqq2l0ixquavsq6l.boards</code>
     * table.
     */
    public Boards boards() {
        if (_boards == null)
            _boards = new Boards(this, Keys.FK_OFFERS_BOARDS);

        return _boards;
    }

    @Override
    public Offers as(String alias) {
        return new Offers(DSL.name(alias), this);
    }

    @Override
    public Offers as(Name alias) {
        return new Offers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offers rename(String name) {
        return new Offers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Offers rename(Name name) {
        return new Offers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, LocalDateTime, LocalDateTime, LocalDateTime, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
